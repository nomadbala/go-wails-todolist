// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, completed)
VALUES ($1, $2)
RETURNING id, title, completed, created_at
`

type CreateTaskParams struct {
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Title, arg.Completed)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, completed, created_at FROM tasks
ORDER BY created_at ASC
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT id, title, completed, created_at FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
    title = $2,
    completed = $3
WHERE id = $1
RETURNING id, title, completed, created_at
`

type UpdateTaskParams struct {
	ID        int64  `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask, arg.ID, arg.Title, arg.Completed)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}
